// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(lumina_node_uniffiFFI)
import lumina_node_uniffiFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_lumina_node_uniffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_lumina_node_uniffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}




/**
 * The main Lumina node that manages the connection to the Celestia network.
 */
public protocol LuminaNodeProtocol : AnyObject {
    
    /**
     * Gets list of currently connected peer IDs.
     */
    func connectedPeers() async throws  -> [PeerId]
    
    /**
     * Returns the next event from the node's event channel.
     */
    func eventsChannel() async throws  -> NodeEvent?
    
    /**
     * Get a synced header for the block with a given hash.
     */
    func getHeaderByHash(hash: String) async throws  -> String
    
    /**
     * Get a synced header for the block with a given height.
     */
    func getHeaderByHeight(height: UInt64) async throws  -> String
    
    /**
     * Gets headers from the given heights range.
     *
     * If start of the range is undefined (None), the first returned header will be of height 1.
     * If end of the range is undefined (None), the last returned header will be the last header in the
     * store.
     *
     * Returns array of serialized ExtendedHeader strings.
     */
    func getHeaders(startHeight: UInt64?, endHeight: UInt64?) async throws  -> [String]
    
    /**
     * Gets the latest locally synced header.
     */
    func getLocalHeadHeader() async throws  -> String
    
    /**
     * Gets the latest header announced in the network.
     */
    func getNetworkHeadHeader() async throws  -> String
    
    /**
     * Gets data sampling metadata for a height.
     *
     * Returns serialized SamplingMetadata string if metadata exists for the height.
     */
    func getSamplingMetadata(height: UInt64) async throws  -> String?
    
    /**
     * Checks if the node is currently running.
     */
    func isRunning() async  -> Bool
    
    /**
     * Gets list of addresses the node is listening to.
     */
    func listeners() async throws  -> [String]
    
    /**
     * Gets the local peer ID as a string.
     */
    func localPeerId() async throws  -> String
    
    /**
     * Gets current network information.
     */
    func networkInfo() async throws  -> NetworkInfo
    
    /**
     * Gets information about connected peers.
     */
    func peerTrackerInfo() async throws  -> PeerTrackerInfo
    
    /**
     * Request the head header from the network.
     *
     * Returns a serialized ExtendedHeader string.
     */
    func requestHeadHeader() async throws  -> String
    
    /**
     * Request a header for the block with a given hash from the network.
     */
    func requestHeaderByHash(hash: String) async throws  -> String
    
    /**
     * Requests a header by its height.
     */
    func requestHeaderByHeight(height: UInt64) async throws  -> String
    
    /**
     * Request headers in range (from, from + amount] from the network.
     *
     * The headers will be verified with the from header.
     * Returns array of serialized ExtendedHeader strings.
     */
    func requestVerifiedHeaders(from: String, amount: UInt64) async throws  -> [String]
    
    /**
     * Sets whether a peer with give ID is trusted.
     */
    func setPeerTrust(peerId: PeerId, isTrusted: Bool) async throws 
    
    /**
     * Starts the node and connects to the network.
     */
    func start() async throws  -> Bool
    
    /**
     * Stops the running node and closes all network connections.
     */
    func stop() async throws 
    
    /**
     * Gets current syncing information.
     */
    func syncerInfo() async throws  -> SyncingInfo
    
    /**
     * Waits until the node is connected to at least one peer.
     */
    func waitConnected() async throws 
    
    /**
     * Waits until the node is connected to at least one trusted peer.
     */
    func waitConnectedTrusted() async throws 
    
}

/**
 * The main Lumina node that manages the connection to the Celestia network.
 */
open class LuminaNode:
    LuminaNodeProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_lumina_node_uniffi_fn_clone_luminanode(self.pointer, $0) }
    }
    /**
     * Sets a new connection to the Lumina node for the specified network.
     */
public convenience init(config: NodeConfig)throws  {
    let pointer =
        try rustCallWithError(FfiConverterTypeLuminaError.lift) {
    uniffi_lumina_node_uniffi_fn_constructor_luminanode_new(
        FfiConverterTypeNodeConfig.lower(config),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_lumina_node_uniffi_fn_free_luminanode(pointer, $0) }
    }

    

    
    /**
     * Gets list of currently connected peer IDs.
     */
open func connectedPeers()async throws  -> [PeerId] {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_connected_peers(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceTypePeerId.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Returns the next event from the node's event channel.
     */
open func eventsChannel()async throws  -> NodeEvent? {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_events_channel(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionTypeNodeEvent.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Get a synced header for the block with a given hash.
     */
open func getHeaderByHash(hash: String)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_get_header_by_hash(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(hash)
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Get a synced header for the block with a given height.
     */
open func getHeaderByHeight(height: UInt64)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_get_header_by_height(
                    self.uniffiClonePointer(),
                    FfiConverterUInt64.lower(height)
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Gets headers from the given heights range.
     *
     * If start of the range is undefined (None), the first returned header will be of height 1.
     * If end of the range is undefined (None), the last returned header will be the last header in the
     * store.
     *
     * Returns array of serialized ExtendedHeader strings.
     */
open func getHeaders(startHeight: UInt64?, endHeight: UInt64?)async throws  -> [String] {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_get_headers(
                    self.uniffiClonePointer(),
                    FfiConverterOptionUInt64.lower(startHeight),FfiConverterOptionUInt64.lower(endHeight)
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceString.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Gets the latest locally synced header.
     */
open func getLocalHeadHeader()async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_get_local_head_header(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Gets the latest header announced in the network.
     */
open func getNetworkHeadHeader()async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_get_network_head_header(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Gets data sampling metadata for a height.
     *
     * Returns serialized SamplingMetadata string if metadata exists for the height.
     */
open func getSamplingMetadata(height: UInt64)async throws  -> String? {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_get_sampling_metadata(
                    self.uniffiClonePointer(),
                    FfiConverterUInt64.lower(height)
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterOptionString.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Checks if the node is currently running.
     */
open func isRunning()async  -> Bool {
    return
        try!  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_is_running(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_i8,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_i8,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_i8,
            liftFunc: FfiConverterBool.lift,
            errorHandler: nil
            
        )
}
    
    /**
     * Gets list of addresses the node is listening to.
     */
open func listeners()async throws  -> [String] {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_listeners(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceString.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Gets the local peer ID as a string.
     */
open func localPeerId()async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_local_peer_id(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Gets current network information.
     */
open func networkInfo()async throws  -> NetworkInfo {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_network_info(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeNetworkInfo.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Gets information about connected peers.
     */
open func peerTrackerInfo()async throws  -> PeerTrackerInfo {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_peer_tracker_info(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypePeerTrackerInfo_lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Request the head header from the network.
     *
     * Returns a serialized ExtendedHeader string.
     */
open func requestHeadHeader()async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_request_head_header(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Request a header for the block with a given hash from the network.
     */
open func requestHeaderByHash(hash: String)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_request_header_by_hash(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(hash)
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Requests a header by its height.
     */
open func requestHeaderByHeight(height: UInt64)async throws  -> String {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_request_header_by_height(
                    self.uniffiClonePointer(),
                    FfiConverterUInt64.lower(height)
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterString.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Request headers in range (from, from + amount] from the network.
     *
     * The headers will be verified with the from header.
     * Returns array of serialized ExtendedHeader strings.
     */
open func requestVerifiedHeaders(from: String, amount: UInt64)async throws  -> [String] {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_request_verified_headers(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(from),FfiConverterUInt64.lower(amount)
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterSequenceString.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Sets whether a peer with give ID is trusted.
     */
open func setPeerTrust(peerId: PeerId, isTrusted: Bool)async throws  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_set_peer_trust(
                    self.uniffiClonePointer(),
                    FfiConverterTypePeerId.lower(peerId),FfiConverterBool.lower(isTrusted)
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_void,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_void,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Starts the node and connects to the network.
     */
open func start()async throws  -> Bool {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_start(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_i8,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_i8,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_i8,
            liftFunc: FfiConverterBool.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Stops the running node and closes all network connections.
     */
open func stop()async throws  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_stop(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_void,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_void,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Gets current syncing information.
     */
open func syncerInfo()async throws  -> SyncingInfo {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_syncer_info(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_rust_buffer,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_rust_buffer,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_rust_buffer,
            liftFunc: FfiConverterTypeSyncingInfo.lift,
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Waits until the node is connected to at least one peer.
     */
open func waitConnected()async throws  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_wait_connected(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_void,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_void,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    
    /**
     * Waits until the node is connected to at least one trusted peer.
     */
open func waitConnectedTrusted()async throws  {
    return
        try  await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_lumina_node_uniffi_fn_method_luminanode_wait_connected_trusted(
                    self.uniffiClonePointer()
                    
                )
            },
            pollFunc: ffi_lumina_node_uniffi_rust_future_poll_void,
            completeFunc: ffi_lumina_node_uniffi_rust_future_complete_void,
            freeFunc: ffi_lumina_node_uniffi_rust_future_free_void,
            liftFunc: { $0 },
            errorHandler: FfiConverterTypeLuminaError.lift
        )
}
    

}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLuminaNode: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = LuminaNode

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> LuminaNode {
        return LuminaNode(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: LuminaNode) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LuminaNode {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: LuminaNode, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}




#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLuminaNode_lift(_ pointer: UnsafeMutableRawPointer) throws -> LuminaNode {
    return try FfiConverterTypeLuminaNode.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLuminaNode_lower(_ value: LuminaNode) -> UnsafeMutableRawPointer {
    return FfiConverterTypeLuminaNode.lower(value)
}


/**
 * A range of blocks.
 */
public struct BlockRange {
    public var start: UInt64
    public var end: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(start: UInt64, end: UInt64) {
        self.start = start
        self.end = end
    }
}



extension BlockRange: Equatable, Hashable {
    public static func ==(lhs: BlockRange, rhs: BlockRange) -> Bool {
        if lhs.start != rhs.start {
            return false
        }
        if lhs.end != rhs.end {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(start)
        hasher.combine(end)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBlockRange: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlockRange {
        return
            try BlockRange(
                start: FfiConverterUInt64.read(from: &buf), 
                end: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: BlockRange, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.start, into: &buf)
        FfiConverterUInt64.write(value.end, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBlockRange_lift(_ buf: RustBuffer) throws -> BlockRange {
    return try FfiConverterTypeBlockRange.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBlockRange_lower(_ value: BlockRange) -> RustBuffer {
    return FfiConverterTypeBlockRange.lower(value)
}


/**
 * Counters of ongoing network connections.
 */
public struct ConnectionCounters {
    /**
     * The current number of connections.
     */
    public var numConnections: UInt32
    /**
     * The current number of pending connections.
     */
    public var numPending: UInt32
    /**
     * The current number of incoming connections.
     */
    public var numPendingIncoming: UInt32
    /**
     * The current number of outgoing connections.
     */
    public var numPendingOutgoing: UInt32
    /**
     * The current number of established connections.
     */
    public var numEstablished: UInt32
    /**
     * The current number of established inbound connections.
     */
    public var numEstablishedIncoming: UInt32
    /**
     * The current number of established outbound connections.
     */
    public var numEstablishedOutgoing: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The current number of connections.
         */numConnections: UInt32, 
        /**
         * The current number of pending connections.
         */numPending: UInt32, 
        /**
         * The current number of incoming connections.
         */numPendingIncoming: UInt32, 
        /**
         * The current number of outgoing connections.
         */numPendingOutgoing: UInt32, 
        /**
         * The current number of established connections.
         */numEstablished: UInt32, 
        /**
         * The current number of established inbound connections.
         */numEstablishedIncoming: UInt32, 
        /**
         * The current number of established outbound connections.
         */numEstablishedOutgoing: UInt32) {
        self.numConnections = numConnections
        self.numPending = numPending
        self.numPendingIncoming = numPendingIncoming
        self.numPendingOutgoing = numPendingOutgoing
        self.numEstablished = numEstablished
        self.numEstablishedIncoming = numEstablishedIncoming
        self.numEstablishedOutgoing = numEstablishedOutgoing
    }
}



extension ConnectionCounters: Equatable, Hashable {
    public static func ==(lhs: ConnectionCounters, rhs: ConnectionCounters) -> Bool {
        if lhs.numConnections != rhs.numConnections {
            return false
        }
        if lhs.numPending != rhs.numPending {
            return false
        }
        if lhs.numPendingIncoming != rhs.numPendingIncoming {
            return false
        }
        if lhs.numPendingOutgoing != rhs.numPendingOutgoing {
            return false
        }
        if lhs.numEstablished != rhs.numEstablished {
            return false
        }
        if lhs.numEstablishedIncoming != rhs.numEstablishedIncoming {
            return false
        }
        if lhs.numEstablishedOutgoing != rhs.numEstablishedOutgoing {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(numConnections)
        hasher.combine(numPending)
        hasher.combine(numPendingIncoming)
        hasher.combine(numPendingOutgoing)
        hasher.combine(numEstablished)
        hasher.combine(numEstablishedIncoming)
        hasher.combine(numEstablishedOutgoing)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeConnectionCounters: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ConnectionCounters {
        return
            try ConnectionCounters(
                numConnections: FfiConverterUInt32.read(from: &buf), 
                numPending: FfiConverterUInt32.read(from: &buf), 
                numPendingIncoming: FfiConverterUInt32.read(from: &buf), 
                numPendingOutgoing: FfiConverterUInt32.read(from: &buf), 
                numEstablished: FfiConverterUInt32.read(from: &buf), 
                numEstablishedIncoming: FfiConverterUInt32.read(from: &buf), 
                numEstablishedOutgoing: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: ConnectionCounters, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.numConnections, into: &buf)
        FfiConverterUInt32.write(value.numPending, into: &buf)
        FfiConverterUInt32.write(value.numPendingIncoming, into: &buf)
        FfiConverterUInt32.write(value.numPendingOutgoing, into: &buf)
        FfiConverterUInt32.write(value.numEstablished, into: &buf)
        FfiConverterUInt32.write(value.numEstablishedIncoming, into: &buf)
        FfiConverterUInt32.write(value.numEstablishedOutgoing, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectionCounters_lift(_ buf: RustBuffer) throws -> ConnectionCounters {
    return try FfiConverterTypeConnectionCounters.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeConnectionCounters_lower(_ value: ConnectionCounters) -> RustBuffer {
    return FfiConverterTypeConnectionCounters.lower(value)
}


public struct NetworkInfo {
    /**
     * The total number of connected peers.
     */
    public var numPeers: UInt32
    /**
     * Counters of ongoing network connections.
     */
    public var connectionCounters: ConnectionCounters

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The total number of connected peers.
         */numPeers: UInt32, 
        /**
         * Counters of ongoing network connections.
         */connectionCounters: ConnectionCounters) {
        self.numPeers = numPeers
        self.connectionCounters = connectionCounters
    }
}



extension NetworkInfo: Equatable, Hashable {
    public static func ==(lhs: NetworkInfo, rhs: NetworkInfo) -> Bool {
        if lhs.numPeers != rhs.numPeers {
            return false
        }
        if lhs.connectionCounters != rhs.connectionCounters {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(numPeers)
        hasher.combine(connectionCounters)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNetworkInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NetworkInfo {
        return
            try NetworkInfo(
                numPeers: FfiConverterUInt32.read(from: &buf), 
                connectionCounters: FfiConverterTypeConnectionCounters.read(from: &buf)
        )
    }

    public static func write(_ value: NetworkInfo, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.numPeers, into: &buf)
        FfiConverterTypeConnectionCounters.write(value.connectionCounters, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNetworkInfo_lift(_ buf: RustBuffer) throws -> NetworkInfo {
    return try FfiConverterTypeNetworkInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNetworkInfo_lower(_ value: NetworkInfo) -> RustBuffer {
    return FfiConverterTypeNetworkInfo.lower(value)
}


/**
 * Configuration options for the Lumina node
 */
public struct NodeConfig {
    /**
     * Base path for storing node data as a string
     */
    public var basePath: String
    /**
     * Network to connect to
     */
    public var network: Network
    /**
     * Custom list of bootstrap peers to connect to.
     * If None, uses the canonical bootnodes for the network.
     */
    public var bootnodes: [String]?
    /**
     * Custom syncing window in seconds. Default is 30 days.
     */
    public var syncingWindowSecs: UInt32?
    /**
     * Custom pruning delay after syncing window in seconds. Default is 1 hour.
     */
    public var pruningDelaySecs: UInt32?
    /**
     * Maximum number of headers in batch while syncing. Default is 128.
     */
    public var batchSize: UInt64?
    /**
     * Optional Set the keypair to be used as Node's identity. If None, generates a new Ed25519 keypair.
     */
    public var ed25519SecretKeyBytes: Data?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Base path for storing node data as a string
         */basePath: String, 
        /**
         * Network to connect to
         */network: Network, 
        /**
         * Custom list of bootstrap peers to connect to.
         * If None, uses the canonical bootnodes for the network.
         */bootnodes: [String]?, 
        /**
         * Custom syncing window in seconds. Default is 30 days.
         */syncingWindowSecs: UInt32?, 
        /**
         * Custom pruning delay after syncing window in seconds. Default is 1 hour.
         */pruningDelaySecs: UInt32?, 
        /**
         * Maximum number of headers in batch while syncing. Default is 128.
         */batchSize: UInt64?, 
        /**
         * Optional Set the keypair to be used as Node's identity. If None, generates a new Ed25519 keypair.
         */ed25519SecretKeyBytes: Data?) {
        self.basePath = basePath
        self.network = network
        self.bootnodes = bootnodes
        self.syncingWindowSecs = syncingWindowSecs
        self.pruningDelaySecs = pruningDelaySecs
        self.batchSize = batchSize
        self.ed25519SecretKeyBytes = ed25519SecretKeyBytes
    }
}



extension NodeConfig: Equatable, Hashable {
    public static func ==(lhs: NodeConfig, rhs: NodeConfig) -> Bool {
        if lhs.basePath != rhs.basePath {
            return false
        }
        if lhs.network != rhs.network {
            return false
        }
        if lhs.bootnodes != rhs.bootnodes {
            return false
        }
        if lhs.syncingWindowSecs != rhs.syncingWindowSecs {
            return false
        }
        if lhs.pruningDelaySecs != rhs.pruningDelaySecs {
            return false
        }
        if lhs.batchSize != rhs.batchSize {
            return false
        }
        if lhs.ed25519SecretKeyBytes != rhs.ed25519SecretKeyBytes {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(basePath)
        hasher.combine(network)
        hasher.combine(bootnodes)
        hasher.combine(syncingWindowSecs)
        hasher.combine(pruningDelaySecs)
        hasher.combine(batchSize)
        hasher.combine(ed25519SecretKeyBytes)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNodeConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeConfig {
        return
            try NodeConfig(
                basePath: FfiConverterString.read(from: &buf), 
                network: FfiConverterTypeNetwork.read(from: &buf), 
                bootnodes: FfiConverterOptionSequenceString.read(from: &buf), 
                syncingWindowSecs: FfiConverterOptionUInt32.read(from: &buf), 
                pruningDelaySecs: FfiConverterOptionUInt32.read(from: &buf), 
                batchSize: FfiConverterOptionUInt64.read(from: &buf), 
                ed25519SecretKeyBytes: FfiConverterOptionData.read(from: &buf)
        )
    }

    public static func write(_ value: NodeConfig, into buf: inout [UInt8]) {
        FfiConverterString.write(value.basePath, into: &buf)
        FfiConverterTypeNetwork.write(value.network, into: &buf)
        FfiConverterOptionSequenceString.write(value.bootnodes, into: &buf)
        FfiConverterOptionUInt32.write(value.syncingWindowSecs, into: &buf)
        FfiConverterOptionUInt32.write(value.pruningDelaySecs, into: &buf)
        FfiConverterOptionUInt64.write(value.batchSize, into: &buf)
        FfiConverterOptionData.write(value.ed25519SecretKeyBytes, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNodeConfig_lift(_ buf: RustBuffer) throws -> NodeConfig {
    return try FfiConverterTypeNodeConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNodeConfig_lower(_ value: NodeConfig) -> RustBuffer {
    return FfiConverterTypeNodeConfig.lower(value)
}


public struct PeerId {
    /**
     * The peer ID stored as base58 string.
     */
    public var peerId: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The peer ID stored as base58 string.
         */peerId: String) {
        self.peerId = peerId
    }
}



extension PeerId: Equatable, Hashable {
    public static func ==(lhs: PeerId, rhs: PeerId) -> Bool {
        if lhs.peerId != rhs.peerId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(peerId)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypePeerId: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PeerId {
        return
            try PeerId(
                peerId: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: PeerId, into buf: inout [UInt8]) {
        FfiConverterString.write(value.peerId, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePeerId_lift(_ buf: RustBuffer) throws -> PeerId {
    return try FfiConverterTypePeerId.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypePeerId_lower(_ value: PeerId) -> RustBuffer {
    return FfiConverterTypePeerId.lower(value)
}


public struct ShareCoordinate {
    public var row: UInt16
    public var column: UInt16

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(row: UInt16, column: UInt16) {
        self.row = row
        self.column = column
    }
}



extension ShareCoordinate: Equatable, Hashable {
    public static func ==(lhs: ShareCoordinate, rhs: ShareCoordinate) -> Bool {
        if lhs.row != rhs.row {
            return false
        }
        if lhs.column != rhs.column {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(row)
        hasher.combine(column)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeShareCoordinate: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ShareCoordinate {
        return
            try ShareCoordinate(
                row: FfiConverterUInt16.read(from: &buf), 
                column: FfiConverterUInt16.read(from: &buf)
        )
    }

    public static func write(_ value: ShareCoordinate, into buf: inout [UInt8]) {
        FfiConverterUInt16.write(value.row, into: &buf)
        FfiConverterUInt16.write(value.column, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeShareCoordinate_lift(_ buf: RustBuffer) throws -> ShareCoordinate {
    return try FfiConverterTypeShareCoordinate.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeShareCoordinate_lower(_ value: ShareCoordinate) -> RustBuffer {
    return FfiConverterTypeShareCoordinate.lower(value)
}


/**
 * Status of the node syncing.
 */
public struct SyncingInfo {
    /**
     * Ranges of headers that are already synchronised
     */
    public var storedHeaders: [BlockRange]
    /**
     * Syncing target. The latest height seen in the network that was successfully verified.
     */
    public var subjectiveHead: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Ranges of headers that are already synchronised
         */storedHeaders: [BlockRange], 
        /**
         * Syncing target. The latest height seen in the network that was successfully verified.
         */subjectiveHead: UInt64) {
        self.storedHeaders = storedHeaders
        self.subjectiveHead = subjectiveHead
    }
}



extension SyncingInfo: Equatable, Hashable {
    public static func ==(lhs: SyncingInfo, rhs: SyncingInfo) -> Bool {
        if lhs.storedHeaders != rhs.storedHeaders {
            return false
        }
        if lhs.subjectiveHead != rhs.subjectiveHead {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(storedHeaders)
        hasher.combine(subjectiveHead)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSyncingInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SyncingInfo {
        return
            try SyncingInfo(
                storedHeaders: FfiConverterSequenceTypeBlockRange.read(from: &buf), 
                subjectiveHead: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: SyncingInfo, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeBlockRange.write(value.storedHeaders, into: &buf)
        FfiConverterUInt64.write(value.subjectiveHead, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSyncingInfo_lift(_ buf: RustBuffer) throws -> SyncingInfo {
    return try FfiConverterTypeSyncingInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSyncingInfo_lower(_ value: SyncingInfo) -> RustBuffer {
    return FfiConverterTypeSyncingInfo.lower(value)
}


/**
 * Represents all possible errors that can occur in the LuminaNode.
 */
public enum LuminaError {

    
    
    /**
     * Error returned when trying to perform operations on a node that isn't running
     */
    case NodeNotRunning
    /**
     * Error returned when network operations fail
     */
    case NetworkError(
        /**
         * Description of the network error
         */msg: String
    )
    /**
     * Error returned when storage operations fail
     */
    case StorageError(
        /**
         * Description of the storage error
         */msg: String
    )
    /**
     * Error returned when trying to start a node that's already running
     */
    case AlreadyRunning
    /**
     * Error returned when a mutex lock operation fails
     */
    case LockError
    /**
     * Error returned when a hash string is invalid or malformed
     */
    case InvalidHash(
        /**
         * Description of why the hash is invalid
         */msg: String
    )
    /**
     * Error returned when a header is invalid or malformed
     */
    case InvalidHeader(
        /**
         * Description of why the header is invalid
         */msg: String
    )
    /**
     * Error returned when storage initialization fails
     */
    case StorageInit(
        /**
         * Description of why storage initialization failed
         */msg: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLuminaError: FfiConverterRustBuffer {
    typealias SwiftType = LuminaError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LuminaError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .NodeNotRunning
        case 2: return .NetworkError(
            msg: try FfiConverterString.read(from: &buf)
            )
        case 3: return .StorageError(
            msg: try FfiConverterString.read(from: &buf)
            )
        case 4: return .AlreadyRunning
        case 5: return .LockError
        case 6: return .InvalidHash(
            msg: try FfiConverterString.read(from: &buf)
            )
        case 7: return .InvalidHeader(
            msg: try FfiConverterString.read(from: &buf)
            )
        case 8: return .StorageInit(
            msg: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LuminaError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .NodeNotRunning:
            writeInt(&buf, Int32(1))
        
        
        case let .NetworkError(msg):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(msg, into: &buf)
            
        
        case let .StorageError(msg):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(msg, into: &buf)
            
        
        case .AlreadyRunning:
            writeInt(&buf, Int32(4))
        
        
        case .LockError:
            writeInt(&buf, Int32(5))
        
        
        case let .InvalidHash(msg):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(msg, into: &buf)
            
        
        case let .InvalidHeader(msg):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(msg, into: &buf)
            
        
        case let .StorageInit(msg):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(msg, into: &buf)
            
        }
    }
}


extension LuminaError: Equatable, Hashable {}

extension LuminaError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Events emitted by the node.
 */

public enum NodeEvent {
    
    /**
     * Node is connecting to bootnodes
     */
    case connectingToBootnodes
    /**
     * Peer just connected
     */
    case peerConnected(
        /**
         * The ID of the peer.
         */id: PeerId, 
        /**
         * Whether peer was in the trusted list or not.
         */trusted: Bool
    )
    case peerDisconnected(
        /**
         * The ID of the peer.
         */id: PeerId, 
        /**
         * Whether peer was in the trusted list or not.
         */trusted: Bool
    )
    /**
     * Sampling just started.
     */
    case samplingStarted(
        /**
         * The block height that will be sampled.
         */height: UInt64, 
        /**
         * The square width of the block.
         */squareWidth: UInt16, 
        /**
         * The coordinates of the shares that will be sampled.
         */shares: [ShareCoordinate]
    )
    /**
     * A share was sampled.
     */
    case shareSamplingResult(
        /**
         * The block height of the share.
         */height: UInt64, 
        /**
         * The square width of the block.
         */squareWidth: UInt16, 
        /**
         * The row of the share.
         */row: UInt16, 
        /**
         * The column of the share.
         */column: UInt16, 
        /**
         * The result of the sampling of the share.
         */accepted: Bool
    )
    /**
     * Sampling just finished.
     */
    case samplingFinished(
        /**
         * The block height that was sampled.
         */height: UInt64, 
        /**
         * The overall result of the sampling.
         */accepted: Bool, 
        /**
         * How much time sampling took in milliseconds.
         */tookMs: UInt64
    )
    /**
     * Data sampling fatal error.
     */
    case fatalDaserError(
        /**
         * A human readable error.
         */error: String
    )
    /**
     * A new header was added from HeaderSub.
     */
    case addedHeaderFromHeaderSub(
        /**
         * The height of the header.
         */height: UInt64
    )
    /**
     * Fetching header of network head just started.
     */
    case fetchingHeadHeaderStarted
    /**
     * Fetching header of network head just finished.
     */
    case fetchingHeadHeaderFinished(
        /**
         * The height of the network head.
         */height: UInt64, 
        /**
         * How much time fetching took in milliseconds.
         */tookMs: UInt64
    )
    /**
     * Fetching headers of a specific block range just started.
     */
    case fetchingHeadersStarted(
        /**
         * Start of the range.
         */fromHeight: UInt64, 
        /**
         * End of the range (included).
         */toHeight: UInt64
    )
    /**
     * Fetching headers of a specific block range just finished.
     */
    case fetchingHeadersFinished(
        /**
         * Start of the range.
         */fromHeight: UInt64, 
        /**
         * End of the range (included).
         */toHeight: UInt64, 
        /**
         * How much time fetching took in milliseconds.
         */tookMs: UInt64
    )
    /**
     * Fetching headers of a specific block range just failed.
     */
    case fetchingHeadersFailed(
        /**
         * Start of the range.
         */fromHeight: UInt64, 
        /**
         * End of the range (included).
         */toHeight: UInt64, 
        /**
         * A human readable error.
         */error: String, 
        /**
         * How much time fetching took in milliseconds.
         */tookMs: UInt64
    )
    /**
     * Header syncing fatal error.
     */
    case fatalSyncerError(
        /**
         * A human readable error.
         */error: String
    )
    /**
     * Pruned headers up to and including specified height.
     */
    case prunedHeaders(
        /**
         * Last header height that was pruned
         */toHeight: UInt64
    )
    /**
     * Pruning fatal error.
     */
    case fatalPrunerError(
        /**
         * A human readable error.
         */error: String
    )
    /**
     * Network was compromised.
     *
     * This happens when a valid bad encoding fraud proof is received.
     * Ideally it would never happen, but protection needs to exist.
     * In case of compromised network, syncing and data sampling will
     * stop immediately.
     */
    case networkCompromised
    /**
     * Node stopped.
     */
    case nodeStopped
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNodeEvent: FfiConverterRustBuffer {
    typealias SwiftType = NodeEvent

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NodeEvent {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .connectingToBootnodes
        
        case 2: return .peerConnected(id: try FfiConverterTypePeerId.read(from: &buf), trusted: try FfiConverterBool.read(from: &buf)
        )
        
        case 3: return .peerDisconnected(id: try FfiConverterTypePeerId.read(from: &buf), trusted: try FfiConverterBool.read(from: &buf)
        )
        
        case 4: return .samplingStarted(height: try FfiConverterUInt64.read(from: &buf), squareWidth: try FfiConverterUInt16.read(from: &buf), shares: try FfiConverterSequenceTypeShareCoordinate.read(from: &buf)
        )
        
        case 5: return .shareSamplingResult(height: try FfiConverterUInt64.read(from: &buf), squareWidth: try FfiConverterUInt16.read(from: &buf), row: try FfiConverterUInt16.read(from: &buf), column: try FfiConverterUInt16.read(from: &buf), accepted: try FfiConverterBool.read(from: &buf)
        )
        
        case 6: return .samplingFinished(height: try FfiConverterUInt64.read(from: &buf), accepted: try FfiConverterBool.read(from: &buf), tookMs: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 7: return .fatalDaserError(error: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .addedHeaderFromHeaderSub(height: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 9: return .fetchingHeadHeaderStarted
        
        case 10: return .fetchingHeadHeaderFinished(height: try FfiConverterUInt64.read(from: &buf), tookMs: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 11: return .fetchingHeadersStarted(fromHeight: try FfiConverterUInt64.read(from: &buf), toHeight: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 12: return .fetchingHeadersFinished(fromHeight: try FfiConverterUInt64.read(from: &buf), toHeight: try FfiConverterUInt64.read(from: &buf), tookMs: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 13: return .fetchingHeadersFailed(fromHeight: try FfiConverterUInt64.read(from: &buf), toHeight: try FfiConverterUInt64.read(from: &buf), error: try FfiConverterString.read(from: &buf), tookMs: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 14: return .fatalSyncerError(error: try FfiConverterString.read(from: &buf)
        )
        
        case 15: return .prunedHeaders(toHeight: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 16: return .fatalPrunerError(error: try FfiConverterString.read(from: &buf)
        )
        
        case 17: return .networkCompromised
        
        case 18: return .nodeStopped
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NodeEvent, into buf: inout [UInt8]) {
        switch value {
        
        
        case .connectingToBootnodes:
            writeInt(&buf, Int32(1))
        
        
        case let .peerConnected(id,trusted):
            writeInt(&buf, Int32(2))
            FfiConverterTypePeerId.write(id, into: &buf)
            FfiConverterBool.write(trusted, into: &buf)
            
        
        case let .peerDisconnected(id,trusted):
            writeInt(&buf, Int32(3))
            FfiConverterTypePeerId.write(id, into: &buf)
            FfiConverterBool.write(trusted, into: &buf)
            
        
        case let .samplingStarted(height,squareWidth,shares):
            writeInt(&buf, Int32(4))
            FfiConverterUInt64.write(height, into: &buf)
            FfiConverterUInt16.write(squareWidth, into: &buf)
            FfiConverterSequenceTypeShareCoordinate.write(shares, into: &buf)
            
        
        case let .shareSamplingResult(height,squareWidth,row,column,accepted):
            writeInt(&buf, Int32(5))
            FfiConverterUInt64.write(height, into: &buf)
            FfiConverterUInt16.write(squareWidth, into: &buf)
            FfiConverterUInt16.write(row, into: &buf)
            FfiConverterUInt16.write(column, into: &buf)
            FfiConverterBool.write(accepted, into: &buf)
            
        
        case let .samplingFinished(height,accepted,tookMs):
            writeInt(&buf, Int32(6))
            FfiConverterUInt64.write(height, into: &buf)
            FfiConverterBool.write(accepted, into: &buf)
            FfiConverterUInt64.write(tookMs, into: &buf)
            
        
        case let .fatalDaserError(error):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(error, into: &buf)
            
        
        case let .addedHeaderFromHeaderSub(height):
            writeInt(&buf, Int32(8))
            FfiConverterUInt64.write(height, into: &buf)
            
        
        case .fetchingHeadHeaderStarted:
            writeInt(&buf, Int32(9))
        
        
        case let .fetchingHeadHeaderFinished(height,tookMs):
            writeInt(&buf, Int32(10))
            FfiConverterUInt64.write(height, into: &buf)
            FfiConverterUInt64.write(tookMs, into: &buf)
            
        
        case let .fetchingHeadersStarted(fromHeight,toHeight):
            writeInt(&buf, Int32(11))
            FfiConverterUInt64.write(fromHeight, into: &buf)
            FfiConverterUInt64.write(toHeight, into: &buf)
            
        
        case let .fetchingHeadersFinished(fromHeight,toHeight,tookMs):
            writeInt(&buf, Int32(12))
            FfiConverterUInt64.write(fromHeight, into: &buf)
            FfiConverterUInt64.write(toHeight, into: &buf)
            FfiConverterUInt64.write(tookMs, into: &buf)
            
        
        case let .fetchingHeadersFailed(fromHeight,toHeight,error,tookMs):
            writeInt(&buf, Int32(13))
            FfiConverterUInt64.write(fromHeight, into: &buf)
            FfiConverterUInt64.write(toHeight, into: &buf)
            FfiConverterString.write(error, into: &buf)
            FfiConverterUInt64.write(tookMs, into: &buf)
            
        
        case let .fatalSyncerError(error):
            writeInt(&buf, Int32(14))
            FfiConverterString.write(error, into: &buf)
            
        
        case let .prunedHeaders(toHeight):
            writeInt(&buf, Int32(15))
            FfiConverterUInt64.write(toHeight, into: &buf)
            
        
        case let .fatalPrunerError(error):
            writeInt(&buf, Int32(16))
            FfiConverterString.write(error, into: &buf)
            
        
        case .networkCompromised:
            writeInt(&buf, Int32(17))
        
        
        case .nodeStopped:
            writeInt(&buf, Int32(18))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNodeEvent_lift(_ buf: RustBuffer) throws -> NodeEvent {
    return try FfiConverterTypeNodeEvent.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNodeEvent_lower(_ value: NodeEvent) -> RustBuffer {
    return FfiConverterTypeNodeEvent.lower(value)
}



extension NodeEvent: Equatable, Hashable {}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeNodeEvent: FfiConverterRustBuffer {
    typealias SwiftType = NodeEvent?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeNodeEvent.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeNodeEvent.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeBlockRange: FfiConverterRustBuffer {
    typealias SwiftType = [BlockRange]

    public static func write(_ value: [BlockRange], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeBlockRange.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [BlockRange] {
        let len: Int32 = try readInt(&buf)
        var seq = [BlockRange]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeBlockRange.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypePeerId: FfiConverterRustBuffer {
    typealias SwiftType = [PeerId]

    public static func write(_ value: [PeerId], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypePeerId.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [PeerId] {
        let len: Int32 = try readInt(&buf)
        var seq = [PeerId]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypePeerId.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeShareCoordinate: FfiConverterRustBuffer {
    typealias SwiftType = [ShareCoordinate]

    public static func write(_ value: [ShareCoordinate], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeShareCoordinate.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ShareCoordinate] {
        let len: Int32 = try readInt(&buf)
        var seq = [ShareCoordinate]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeShareCoordinate.read(from: &buf))
        }
        return seq
    }
}




private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

fileprivate let uniffiContinuationHandleMap = UniffiHandleMap<UnsafeContinuation<Int8, Never>>()

fileprivate func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UInt64,
    pollFunc: (UInt64, @escaping UniffiRustFutureContinuationCallback, UInt64) -> (),
    completeFunc: (UInt64, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UInt64) -> (),
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Swift.Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8;
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(
                rustFuture,
                uniffiFutureContinuationCallback,
                uniffiContinuationHandleMap.insert(obj: $0)
            )
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
fileprivate func uniffiFutureContinuationCallback(handle: UInt64, pollResult: Int8) {
    if let continuation = try? uniffiContinuationHandleMap.remove(handle: handle) {
        continuation.resume(returning: pollResult)
    } else {
        print("uniffiFutureContinuationCallback invalid handle")
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_lumina_node_uniffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_connected_peers() != 17234) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_events_channel() != 14088) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_get_header_by_hash() != 61469) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_get_header_by_height() != 12003) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_get_headers() != 26729) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_get_local_head_header() != 34761) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_get_network_head_header() != 15670) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_get_sampling_metadata() != 54906) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_is_running() != 50837) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_listeners() != 33420) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_local_peer_id() != 23590) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_network_info() != 11790) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_peer_tracker_info() != 26433) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_request_head_header() != 42787) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_request_header_by_hash() != 34712) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_request_header_by_height() != 42079) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_request_verified_headers() != 37952) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_set_peer_trust() != 14847) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_start() != 8011) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_stop() != 33053) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_syncer_info() != 20757) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_wait_connected() != 24979) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_method_luminanode_wait_connected_trusted() != 57033) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_lumina_node_uniffi_checksum_constructor_luminanode_new() != 3370) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all